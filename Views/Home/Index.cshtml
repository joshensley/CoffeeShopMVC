@model IEnumerable<CoffeeShopMVC.Areas.Admin.Repositories.DTO.ItemProductDTO>
@{
    ViewData["Title"] = "Home Page";
}

<script src="~/js/home.js"></script>

<div id="addContainer" class="">
    <div style="position: relative; text-align: center; color: white;">
        <img src="~/images/static/coffee-shop-co.jpg"
             class="img-fluid"
             alt="Responsive image">
    </div>
</div>

<div class="container">
    <h1 id="headingDrinks" class="text-center mt-3 mb-3">Drinks</h1>
    <hr />
    <div class="row">
        @foreach (var item in Model)
        {
            @if (item.Category == "Drinks")
            {
                <div class="col-4 mb-3">
                    <div class="card h-100 ">
                        <div class="card-body text-center">
                            <h5 class="card-title"><i class="fas fa-coffee"></i> @Html.DisplayFor(modelItem => item.Name)</h5>
                            <div class="btn-group btn-group-sm" role="group" aria-label="First group">
                                <button id="btnDown-@Html.DisplayFor(modelItem => item.ID)"
                                        class="btnDown btn btn-outline-dark"
                                        value="@Html.DisplayFor(modelItem => item.ID)"
                                        type="button">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                                <button id="drinkValue-@Html.DisplayFor(modelItem => item.ID)"
                                        type="button"
                                        class="drinkValue btn btn-outline-dark">
                                    1
                                </button>
                                <button id="btnUp-@Html.DisplayFor(modelItem => item.ID)"
                                        class="btnUp btn btn-outline-dark"
                                        value="@Html.DisplayFor(modelItem => item.ID)"
                                        type="button">
                                    <i class="fas fa-chevron-up"></i>
                                </button>
                            </div>

                            <div class="btn-group" role="group" aria-label="Second group">
                                <input type="hidden" id="inputCount-@Html.DisplayFor(modelItem => item.ID)" value="1" />
                                <button type="button" value="@Html.DisplayFor(modelItem => item.ID)" class="addToOrder btn btn-sm btn-dark">Add</button> 
                            </div>

                        </div>
                        <div class="card-footer">
                            <small class="text-muted">Price: $@Html.DisplayFor(modelItem => item.Price)</small>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <h1 class="text-center mt-3 mb-3">Food</h1>
    <hr />
    <div class="row">
        @foreach (var item in Model)
        {
            @if (item.Category == "Food")
            {
                <div class="col-4 mb-3">
                    <div class="card h-100 ">
                        <div class="card-body text-center">
                            <h5 class="card-title"><i class="fas fa-coffee"></i> @Html.DisplayFor(modelItem => item.Name)</h5>
                            <div class="btn-group btn-group-sm" role="group" aria-label="First group">
                                <button id="btnDown-@Html.DisplayFor(modelItem => item.ID)"
                                        class="btnDown btn btn-outline-dark"
                                        value="@Html.DisplayFor(modelItem => item.ID)"
                                        type="button">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                                <button id="drinkValue-@Html.DisplayFor(modelItem => item.ID)"
                                        type="button"
                                        class="drinkValue btn btn-outline-dark">
                                    1
                                </button>
                                <button id="btnUp-@Html.DisplayFor(modelItem => item.ID)"
                                        class="btnUp btn btn-outline-dark"
                                        value="@Html.DisplayFor(modelItem => item.ID)"
                                        type="button">
                                    <i class="fas fa-chevron-up"></i>
                                </button>
                            </div>

                            <div class="btn-group" role="group" aria-label="Second group">
                                <input type="hidden" id="inputCount-@Html.DisplayFor(modelItem => item.ID)" value="1" />
                                <button type="button" value="@Html.DisplayFor(modelItem => item.ID)" class="addToOrder btn btn-sm btn-dark">Add</button>
                            </div>

                        </div>
                        <div class="card-footer">
                            <small class="text-muted">Price: $@Html.DisplayFor(modelItem => item.Price)</small>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

</div>


@section Scripts {
    <script>
        $(function () {
            $(window).resize(function () {
                if ($(window).width() < 1800) {
                    $("#addContainer").removeClass("container");
                }
                else {
                    $("#addContainer").addClass("container");
                }
            });

            if (localStorage.getItem("orderCartGroup") === null) {
                const id = Math.random().toString();
                localStorage.setItem("orderCartGroup", id);
            }

           @* $(".btnDown").click(function () {
                const $drinkValue = $("#drinkValue-" + this.value)
                const $value = parseInt($drinkValue.text());

                if ($value > 1) {
                    $drinkValue.text($value - 1);
                }
            });*@


            @* $(".btnUp").click(function () {
                const $drinkValue = $("#drinkValue-" + this.value)
                const $inputCount = $("#inputCount-" + this.value)
                const $value = parseInt($drinkValue.text());
                $drinkValue.text($value + 1);
                $inputCount.val($value + 1);
            });*@




            // FOR AJAX TO WORK URL.ACTION CANNOT BE IN THE JAVASCRIPT FILE
            $(".addToOrder").click(function () {
                const itemValue = this.value;
                const inputCountValue = $(`#inputCount-${itemValue}`).val();
                const orderCartGroup = localStorage.getItem("orderCartGroup");

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddToOrder")",
                    data: JSON.stringify({
                        ItemValue: itemValue,
                        InputCountValue: inputCountValue,
                        OrderCartGroup: orderCartGroup
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "JSON",
                    success: function (response) {

                        $(".dropdown-menu").prepend(
                            `<li>
                                <a class="dropdown-item" href="#">
                                    <small>
                                        <i class="fas fa-coffee"></i> ${response.itemProductName} - ${response.quantity} qty - $${response.itemProductTotalPrice}
                                    </small>
                                </a>
                            </li>`
                        );

                        const quantity = parseInt($("#sumTotalQuantity").text()) + 1;
                        $("#sumTotalQuantity").text(quantity);

                        const previousSumText = $("#sumTotalPrice").text();
                        const previousSum = parseInt(previousSumText.slice(1, previousSumText.length));
                        const sum = parseInt(response.itemProductTotalPrice + previousSum);
                        $("#sumTotalPrice").text("$" + sum);
                        



                       @* let sumTotalPrice = response.reduce(function (accumulator, currentValue) {
                            return accumulator + currentValue.itemProductTotalPrice;
                        }, 0);
                        $("#sumTotalPrice").text(sumTotalPrice);*@


                    },
                    error: function (req, status, error) {
                        console.log(error);
                    }
                });

            })
        })
</script>
}


